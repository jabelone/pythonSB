{
  "name": "pythonSB",
  "tagline": "An easy way to control servos from python.",
  "body": "### Welcome to pythonSB\r\npythonSB (python Servo Blaster) is a python implementation of the [Servo Blaster](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster) program. It's main purpose is to make it easier to control servos attached to your raspberry pi directly from python. It takes care of writing to the servo blaster file and allows you to set servo positions in degrees, motor/LED power levels in percent or manually set the timing in us (micro seconds).  All this with just two, simple functions in python.\r\n\r\n### License\r\nGreat News! pythonSB is released under the [GNU GPL v3](https://www.google.com.au/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=0ahUKEwjOk4ujjfrLAhWne6YKHfj2AgkQFggcMAA&url=http%3A%2F%2Fwww.gnu.org%2Flicenses%2Fgpl-3.0.en.html&usg=AFQjCNH7LpUmtrHljmxxj2DxbaZqewm5Jw&sig2=HGnNxRiqFclo4m0WipN2DQ) or later license for all to freely enjoy.\r\n\r\n### Installation\r\nThis python module requires you to have the [Servo Blaster](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster) program installed and running. To to do so please follow these instructions:\r\n\r\n1) Grab the [Servo Blaster](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster) github repo from here:\r\n\r\n`sudo apt-get install git`\r\n\r\nthen\r\n\r\n`git clone https://github.com/richardghirst/PiBits.git`\r\n\r\n2) Navigate to the program folder: \r\n\r\n`cd PiBits/ServoBlaster/user`\r\n\r\n3) Now we need to install Servo Blaster: \r\n\r\n`sudo make install`\r\n\r\nDepending on what dev tools you already have installed you might need some others. Open an issue on github if you need help. Now that it is installed, servo blaster should be running. For reference, you can use the following commands:\r\n\r\n`sudo service servoblaster status` to see the current status of servo blaster\r\n\r\n`sudo service servoblaster start` to start servo blaster\r\n\r\n`sudo service servoblaster stop` to stop servo blaster\r\n\r\nHowever, you should never have to manually start/stop it, it should automatically start on boot.\r\n\r\n### Usage\r\npythonSB is very easy to use. With just one small function (and a setup/defining function) you can control a servo on any GPIO pin that Servo Blaster supports. You can see an example of how to use it in the example.py file in this repo.  _Every_ function expects a physical pin number when asking for a servo pin.  [This graphic](https://learn.adafruit.com/assets/22318) shows what the physical pin numbers are quite nicely.\r\nThere are three main functions you can call and three main ways to control servos:\r\n\r\n#### Basic servo_set() call\r\n1) Import the pythonSB module by doing this in your python program: \r\n\r\n`from pythonSB import *`\r\n\r\n2) Manually set the pulse width for the servo, just call:\r\n\r\n`servo_set(servoPin, servoOutput)`\r\n\r\nWhere servoPin is the _physical pin_ on the _P1_ header and servoOutput is the the pulse width (in us) to be output.\r\n\r\n#### Advanced servo_set() call\r\n1) Import the pythonSB module by doing this in your python program: \r\n\r\n`from pythonSB import *`\r\n\r\n2) Manually set the output value by changing these options:\r\n\r\n`servo_set(servoPin, servoOutput, servoPinType=\"\", servoHeader=0)`\r\n\r\n`servoPin` is the servo pin as defined by `servoPinType`, `servoOutput` is the output in us, `servoPinType` is either blank (physical pin on P1 header), \"servo\" (servos as defined by servo blaster [here](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster)), or \"servoHeader\" (the header, either 1 or 5 as explained [here](https://github.com/richardghirst/PiBits/tree/master/ServoBlaster))\r\n\r\n#### Use servo_configure() and servo_set_angle()\r\n\r\n1) Import the pythonSB module by doing this in your python program: \r\n\r\n`from pythonSB import *`\r\n\r\n2) Call the setup function for each servo to define the physical pin number, min pulse, max pulse, min range, max range.  You can map the min/max range to any integer.  So for motor control you could map it from 0-100 or -90 to +90 for steering control. The min/max will always get mapped to the min/max output in us.\r\n\r\n`servo_configure(1, 900, 2100, -90, 90)` would set servo 1 with an output range of 900-2100 us and an input range of -90 to +90. (perfect for steering)\r\n\r\n`servo_configure(2, 1000, 2000, 0, 100)` would set servo 2 with an output range of 1000-2000 us and an input range of 0 to 100. (perfect for motor control)\r\n\r\n3) Call the servo_set function like so:\r\n\r\n`servo_set_angle(1, 0)` would set the servo around the center.  (0 is center of -90 and +90) or `servo_set_angle(1, 90)` could turn full right.\r\n\r\n`servo_set_angle(2, 75)` would set a PWM motor controller to around 75% throttle.  (0 is minimum and 100 is max)\r\n\r\n4) The example.py file has examples of different ways and explains how to use them.\r\n\r\n### FAQ\r\n#### The servos aren't responding to any commands\r\n\r\nIf they are \"slack\" or have no resistance, have they got power? Please do NOT power them from the 5v rail on the pi. I know it's tempting and it may work for 1 or 2 servos but it is NOT good for the pi. Please use a separate battery or power supply. If you're still having problems open an issue on GitHub.\r\n\r\n#### I get an error about importing pythonSB\r\n\r\nYou need to make sure that pythonSB.py is in the same folder as you're project. The easiest way is to download this entire GitHub repository and run the example.py program to see how it works.\r\n\r\n#### It's still not working!\r\n\r\nOpen an issue on GitHub and I'll try to help out.\r\n\r\n### Contributions\r\nThis project is being actively developed by Jaimyn Mayer (@jabelone).  All additions or improvements should be done through a fork, then a pull request.  Anything that adds or fixes something and works well should be accepted.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}